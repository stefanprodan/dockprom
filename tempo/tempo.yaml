# For more information on this configuration, see the complete reference guide at
# https://grafana.com/docs/tempo/latest/configuration/
# https://github.com/grafana/intro-to-mltp/blob/main/tempo/tempo.yaml
# https://github.com/grafana/tempo/blob/main/example/docker-compose/shared/tempo.yaml
# Enables result streaming from Tempo (to Grafana) via HTTP.
stream_over_http_enabled: true

# Configure the server block.
server:
  # Listen for all incoming requests on port 3200.
  http_listen_port: 3200

query_frontend:
  search:
    duration_slo: 5s
    throughput_bytes_slo: 1.073741824e+09
    metadata_slo:
      duration_slo: 5s
      throughput_bytes_slo: 1.073741824e+09
  trace_by_id:
    duration_slo: 5s

# The distributor receives incoming trace span data for the system.
distributor:
  receivers: # This configuration will listen on all ports and protocols that tempo is capable of.
    jaeger: # The receivers all come from the OpenTelemetry collector.  More configuration information can
      protocols: # be found there: https://github.com/open-telemetry/opentelemetry-collector/tree/main/receiver
        thrift_http: #
        grpc: # For a production deployment you should only enable the receivers you need!
        thrift_binary: # Note that from Tempo 2.7.0, if an endpoint if not specified, it will listen only on localhost.
        thrift_compact:
    otlp:
      protocols:
        http:
          endpoint: '0.0.0.0:4318' # Listen to OTLP HTTP on port 4318, on all interfaces.
        grpc:
          endpoint: '0.0.0.0:4317' # This example repository only utilises the OTLP gRPC receiver on port 4317, on all interfaces.
    zipkin: # Receive trace data in any supported Zipkin format.

# The ingester receives data from the distributor and processes it into indices and blocks.
ingester:
  trace_idle_period: 10s # The length of time after a trace has not received spans to consider it complete and flush it.
  max_block_bytes: 1_000_000 # Cut the head block when it hits this size or
  max_block_duration: 5m # this much time passes

# The compactor block configures the compactor responsible for compacting TSDB blocks.
compactor:
  compaction:
    compaction_window: 1h # Blocks in this time window will be compacted together.
    max_block_bytes: 100_000_000 # Maximum size of a compacted block.
    block_retention: 1h # How long to keep blocks. Default is 14 days, this demo system is short-lived.
    compacted_block_retention: 10m # How long to keep compacted blocks stored elsewhere.

metrics_generator:
  registry:
    external_labels:
      source: tempo
      cluster: docker-compose
  storage:
    path: /var/tempo/generator/wal
    remote_write:
      - url: http://prometheus:9090/api/v1/write
        send_exemplars: true
  traces_storage:
    path: /var/tempo/generator/traces

storage:
  trace:
    backend: local # backend configuration to use
    wal:
      path: /var/tempo/wal # where to store the wal locally
    local:
      path: /var/tempo/blocks

overrides:
  defaults:
    metrics_generator:
      processors: [service-graphs, span-metrics, local-blocks] # enables metrics generator
      generate_native_histograms: both
